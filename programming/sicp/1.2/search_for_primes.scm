(define (odd n)
  (= (remainder n 2) 1)
)

(define (next_odd n)
  (if (odd n)
      (+ n 2)
      (+ n 1)
  )
)

(load "1.2/prime_by_search_divisor.scm")

(define (search_consecutive_prime n count)
  (cond ((= count 0)
         (display "are primes."))
        ((prime n)
         (display n)
         (newline)
         (search_consecutive_prime (next_odd n) (- count 1)))
        (else (search_consecutive_prime (next_odd n) count))
  )
)

(define (search_for_primes n)
  (let ((start-time (real-time-clock)))
        (search_consecutive_prime n 3)
       (- (real-time-clock) start-time)
  )
)
